{
  "Account.io": "#!/usr/bin/env io\n\nAccount := Object clone\nAccount balance := 0.0\nAccount deposit := method(v, self balance := self balance + v)\nAccount show := method(write(\"Account balance: $\", balance, \"\\n\"))\n\n\"Inital: \" print\nAccount show\n\n\"Depositing $10\\n\" print\nAccount deposit(10.0)\n\n\"Final: \" print\nAccount show\n",
  "Ackerman.io": "#!/usr/bin/env io\n\nack := method(m, n, \n  //writeln(\"ack(\", m, \",\", n, \")\")\n  if (m < 1, return n + 1) \n  if (n < 1, return ack(m - 1, 1)) \n  return ack(m - 1, ack(m, n - 1)) \n) \n\nack(3, 4) print \n\"\\n\" print\n",
  "BottlesOfBeer.io": "#!/usr/bin/env io\n\nbottle := method(i,\n\tif(i==0, return \"no more bottles of beer\")\n\tif(i==1, return \"1 bottle of beer\")\n\treturn i asString .. \" bottles of beer\"\n)\n\nfor(i, 99, 1, -1,\n\twrite(bottle(i), \" on the wall, \", bottle(i), \",\\n\")\n\twrite(\"take one down, pass it around,\\n\")\n\twrite(bottle(i - 1), \" on the wall.\\n\\n\")\n)\n",
  "Brackets.io": "#!/usr/bin/env io\n// pythonish list and map syntax in Io\n\nObject squareBrackets := Object getSlot(\"list\")\n\na := [1, 2, 3] \na println\n\ncurlyBrackets := method(\n\tmap := Map clone\n\tcall message arguments foreach(arg, arg setName(\"atPut\"); map doMessage(arg))\n\tmap\n)\n\n{a := 1, b := 2} foreach(k, v, writeln(k, \": \", v))\n",
  "Cards.io": "#!/usr/bin/env io\n// By Jason Sackett\n\nRandom setSeed(Date clone now asNumber)\n\nList shuffle := method(\n    for(i, 1, size - 1, \n\tswapIndices(i, Random value(0, size) floor)\n    )\n)\n\nDeck := Object clone do(\n    init := method(\n\tself cards := List clone\n\tlist(\"h\", \"d\", \"c\", \"s\") foreach(suit, \n\t    for(value, 2, 14, cards append(value asString .. suit))\n\t)\n    )\n    init\n    shuffle  := method(cards shuffle)\n    dealCard := method(cards pop)\n    show := method(cards foreach(i, card, write(card, \" \")); \"\\n\" print)\n)\n\nDeck show\nDeck shuffle\nDeck show\n\nDeck dealCard println\nDeck dealCard println\nDeck dealCard println\n",
  "CommandLineArgs.io": "#!/usr/bin/env io\n// Try running this script with some command line arguments. Example:\n// ./io CommandLineArgs.io a b c d\n\nwriteln(\"Command line arguments:\")\nSystem args foreach(println)\n",
  "Conditions.io": "#!/usr/bin/env io\n\n\na := \"foobar\"\n\n\nwriteln(\"test1: \",\n\tif(a == \"foobar\", \"OK\", \"FAILED\")\n)\n\nwriteln(\"test2: \",\n\tif(a == \"foo\", \"FAILED\", \"OK\")\n)\n\nr := \"FAILED\"\nif(a == \"foobar\") then(\n\tr = \"OK\"\n) elseif(a == \"C\") then(\n\tr = \"FAILED\"\n) else (\n\tr = \"FAILED\"\n)\nwriteln(\"test3: \", r)\n\n\nr := \"FAILED\"\nif(a == \"A\") then (\n\tr = \"FAILED\"\n) elseif(a == \"foobar\") then (\n\tr = \"OK\"\n) else (\n\tr = \"FAILED\"\n)\nwriteln(\"test4: \", r)\n\nr := \"FAILED\"\nif(a == \"foobar\") then (\n\tr = \"OK\"\n) elseif(a == \"C\") then (\n\tr = \"FAILED\"\n) else (\n\tr = \"FAILED\"\n)\nwriteln(\"test5: \", r)\n",
  "Control.io": "#!/usr/bin/env io\n// example of implementing control structures\n\nmyif := method(condition,\n\tindex := if(condition, 1, 2)\n\tcall evalArgAt(index)\n)\n\nmyif(19 > 5,\n\twriteln(\"19 > 5. Correct.\")\n,\n\twriteln(\"19 > 5. Incorrect.\")\n)\n\n",
  "ControlFlow.io": "#!/usr/bin/env io\n\nexampleBreak := method(\n\tb := Sequence clone\n\tfor(i, 0, 10, if(i == 5, break); b appendSeq(i asString))\n\tb\n)\n\nexampleContinue := method(\n\tb := Sequence clone\n\tfor(i, 0, 10, if(i == 5, continue); b appendSeq(i asString))\n\tb\n)\n\nexampleReturn := method(\n\tb := Sequence clone\n\tfor(i, 0, 10, if(i == 5, return b); b appendSeq(i asString))\n\tb\n)\n\nwriteln(\"break:    \", \n\tif (exampleBreak == \"01234\", \"OK\", \"FAILED\")\n)\n\nwriteln(\"continue: \", \n\tif (exampleContinue == \"01234678910\", \"OK\", \"FAILED\")\n)\n\nwriteln(\"return:   \", \n\tif (exampleReturn == \"01234\", \"OK\", \"FAILED\")\n)\n",
  "Decompile.io": "#!/usr/bin/env io\n\n// evaluating a string\n\nwriteln(\"1 + 2 ==> \", doString(\"1 + 2\"))\n\nsimpleDecompile := method(\n\t// test of decompiling a method\n\tDog := Object clone\n\tDog bark := method(\"woof!\" print)\n\n\twriteln(\"simple decompiled method: \", Dog getSlot(\"bark\") code)\n)\n\nfancyDecompile := method(\n\twriteln(\"fancy decompile: \", Lobby getSlot(\"simpleDecompile\") asString)\n)\n\nsimpleDecompile\nfancyDecompile\n",
  "Dir.io": "#!/usr/bin/env io\n//Directory directories := method(items select(item, item type ==(\"Directory\") and(item name != \".\") and(item name != \"..\")))\n\nwriteln(\"\")\nwriteln(\"items:\")\nDirectory items foreach(path println)\n\nwriteln(\"\")\nwriteln(\"directories:\")\nDirectory directories foreach(name println)\n\n//writeln(\"\")\n//writeln(\"files:\")\n//Directory files foreach(path println)\n\n",
  "ErlangChallenge.io": "#!/usr/bin/env io\n\n//Collector debugOn\n\nTest := Object clone do(\n\tnext ::= nil\n\tid ::= nil\n\tping := method(\n\t\t//writeln(\"ping \", id)\n\t\tif(next, next @@ping)\n\t\tyield\n\t)\n)\n\nmax := 10000\n\nt := Test clone\n\nsetup := method(\n\tfor(i, 1, max, \n\t\tt := Test clone setId(i) setNext(t)\n\t\tt @@id \n\t\tyield\n\t)\n)\n\nwriteln(max, \" coros\")\t\nwriteln(Date secondsToRun(setup), \" secs to setup\")\t\nwriteln(Date secondsToRun(t ping; yield), \" secs to ping\")\t\n",
  "FizzBuzz.io": "#!/usr/bin/env io\n\n\n// Iterate 1-100 using a\nfor (a, 1, 100,\n\n    // Print the number\n    if ((a % 3) != 0 and (a % 5) != 0,\n        a print\n    )\n\n    // Number is divisible by 3\n    if ((a % 3) == 0,\n        \"Fizz\" print\n    )\n    \n    // Number is divisible by 5\n    if ((a % 5) == 0,\n        \"Buzz\" print\n    )\n\n    // Newline\n    \"\\n\" print\n)\n",
  "Foreach.io": "#!/usr/bin/env io\n\na := List clone append(1, 2, 3)\n\n\nb := method(\n  a foreach(i, v, if(v == 2, return v))\n  write(\"shouldn't get here\\n\")\n)\n\nwrite(\"b := \", b, \"\\n\")\t\t// => 2\n",
  "Hanoi.io": "#!/usr/bin/env io\n\nH := method(n, f, u, t,\n    if (n < 2) then (\n        writeln(f, \" --> \", t)\n    ) else (\n        H(n - 1, f, t, u)\n        writeln(f, \" --> \", t)\n        H(n - 1, u, f, t)\n    )\n)\n\nhanoi := method(n,\n    if (n > 0 and n <= 10) then (\n        H(n, 1, 2, 3)\n    ) else (\n        writeln(\"usage: hanoi n, where 0 < n <= 10\")\n    )\n)\n\nhanoi(3)\n",
  "HelloWorld.io": "#!/usr/bin/env io\n\"Hello world!\" println\n\n// Or\n\nwriteln(\"Hello world (again)\")\n",
  "Inheritance.io": "#!/usr/bin/env io\n\n// Define a Dog object\n\nDog := Object clone\nDog barkPhrase := \"woof!\"\nDog bark := method(barkPhrase print)\n\n// Create Chiwawa subclass of Dog\n\nChiwawa := Dog clone\nChiwawa barkPhrase := \"yip!\"\n\nwrite(\"Dog bark: \")\nDog bark\nwriteln\n\nwrite(\"Chiwawa bark: \")\nChiwawa bark\nwriteln\n\n// make an instance\nmyChiwawa := Chiwawa clone\nmyChiwawa barkPhrase := \"Yo Quiero Taco Bell\"\n\nwrite(\"myChiwawa bark: \")\nmyChiwawa bark\nwriteln\n",
  "MainFile.io": "#!/usr/bin/env io\n\nif(isLaunchScript,\n    # Run from the command line: io MainFile.io\n    writeln(\"Wasn't included from another file\")\n    writeln\n\n    writeln(\"System launchPath: \", System launchPath)\n    writeln(\"System launchScript: \", System launchScript)\n    writeln(\"System args: \", System args)\n,\n    # Loaded using doFile(\"MainFile.io\")\n    writeln(\"Was included from another file\")\n)\n",
  "SimpleCoro.io": "#!/usr/bin/env io\n\nyieldLoop := method(s,\n    for(i, 1, 3, writeln(s, \" \", i); yield)\n)\n\ncoroDo(yieldLoop(\"a\"))\n\nyieldLoop(\"b\")\n\nwriteln(\"done\")\n",
  "Sort.io": "#!/usr/bin/env io\nwords := \"video killed the radio star\" split\nwriteln(\"original: \", words join(\" \"))\nwords = words sortBy(method(a, b, a < b))\nwriteln(\"sortBy:   \", words join(\" \"))\n",
  "Super.io": "#!/usr/bin/env io\nisDebugging := false\n\nobjs := List clone\n\na := Object clone\na init := method(\n  objs append(self)\n  if (isDebugging, writeln(\"a \", self asSimpleString, \" init\"))\n)\n\nb := a clone\nb init := method(\n  super(init)\n  objs append(self)\n  if (isDebugging, writeln(\"b \", self asSimpleString, \" init\"))\n)\n\nc := b clone\nc init := method(\n  super(init)\n  objs append(self)\n  if (isDebugging, writeln(\"c \", self asSimpleString, \" init\"))\n)\n\nif (isDebugging, writeln(\"------------------\"))\n\nobjs empty\nobjs println\nt := c clone\n\nobjs append(t)\n\nobjs foreach(obj,\n  if (obj != objs first, \n    writeln(\"ERROR [not all selfs are the same]\")\n    exit\n  )\n)\nwriteln(\"OK\")\n\nif (isDebugging, write(\"t := \", t uniqueId, \" init\\n\"))\n",
  "WeakLink.io": "#!/usr/bin/env io\nweakLink := WeakLink clone setLink(Object clone)\n\nwriteln(\"WeakLink to \", weakLink link asSimpleString)\n\nwriteln(\"Collecting\")\nCollector collect\n\nif(weakLink link == nil,\n\twriteln(\"Success: Object gone\")\n,\n\twriteln(\"Error: Object not gone\")\n)\n",
  "except.io": "#!/usr/bin/env io\ne := try(foo)\ne catch(\n\twriteln\n\twriteln(\"caught: \", e error)\n\twriteln(\"standard reporting:\")\n\te showStack\n)\nwriteln(\"done\")\n",
  "qsort.io": "#!/usr/bin/env io\nList do(\n\tqsort := method(\n\t\tif(size < 2, return)\n\t\tquickSort(0, size - 1)\n\t)\n\n\tquickSort := method(b, t,\n\t\tloop(\n\t\t\tif (b >= t, return)\n\t\t\t\n\t\t\tlb := b\n\t\t\tub := t\n\t\n\t\t\tloop(\t\t\n\t\t\t\twhile (ub >(lb) and(at(ub) compare(at(lb)) >= 0), \n\t\t\t\t\tub = ub - 1\n\t\t\t\t)\n\t\t\t\t\n\t\t\t\tif (ub != lb,\n\t\t\t\t\tswapIndices(ub, lb)\n\t\t\t\t\twhile (lb <(ub) and(at(lb) compare(at(ub)) <= 0), lb = lb + 1)\n\t\t\t\t\tif (lb != ub, swapIndices(lb, ub))\n\t\t\t\t)\n\t\t\t\t\n\t\t\t\tif(lb == ub, break)\n\t\t\t)\n\t\t\t\n\t\t\tif (lb != 0,\n\t\t\t\t//write(\"-\")\n\t\t\t\tquickSort(b, lb - 1)\n\t\t\t)\n\t\t\tb = lb + 1\n\t\t)\n\t)\n\n\tquickSortRearrange := method(lb, ub,\n\t\tloop(\t\t\n\t\t\twhile ((ub > lb) and(at(ub) >= at(lb)), \n\t\t\t\tub = ub - 1\n\t\t\t)\n\t\t\t\n\t\t\tif (ub != lb,\n\t\t\t\tswapIndices(ub, lb)\n\t\t\t\twhile ((lb < ub) and(at(ub) >= at(lb)), lb = lb + 1)\n\t\t\t\tif (lb != ub, swapIndices(lb, ub))\n\t\t\t)\n\t\t\t\n\t\t\tif(lb == ub, break)\n\t\t)\n\t\tlb\n\t)\n)\n\nwriteln(\"building list\")\na := list()\n10000 repeat(i, a append(i asString))\na shuffle\n\ntestSort := method(\n\ta clone doMessage(call argAt(0))\n)\n\nwriteln(\"Testing\")\n\nfor(i, 0, 3,\n\twriteln(\"testQSort \", Date secondsToRun(testSort(qsort)))\n\twriteln(\"testSort  \", Date secondsToRun(testSort(sortInPlace)))\n\t\"\" println\n)\n",
  "vtest.io": "#!/usr/bin/env io\n\nVector := Sequence clone setItemType(\"float32\") setEncoding(\"number\")\n\nsize := 10000\nv1 := Vector clone setSize(size) rangeFill\nv2 := Vector clone setSize(size) rangeFill\n\nloops := 10000\ns := Date secondsToRun(loops repeat(v1 += v2)) \n\nwriteln(size*loops/(s*1000000000), \" GFLOPS\")\n\n/*\nwithout vectorize\n\n1.882818 GFLOPS\n1.985482 GFLOPS\n1.936254 GFLOPS\n1.952277 GFLOPS\n\nwith fastmath\n\n1.941543 GFLOPS\n1.918827 GFLOPS\n1.896702 GFLOPS\n2.135502 GFLOPS\n\nwith vectorize and fastmath\n\n1.977812 GFLOPS\n2.092639 GFLOPS\n2.039853 GFLOPS\n2.055593 GFLOPS\n*/\n"
}